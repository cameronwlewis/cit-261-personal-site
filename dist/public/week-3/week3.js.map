{"version":3,"sources":["../../../public/week-3/week3.js"],"names":["Car","make","model","year","color","changeMake","new_make","myCar","wifeCar","prototype","info","infoString","document","getElementById","innerHTML","Coupe","call","Object","create","constructor","porsche","checkInheritance"],"mappings":";;AAAA;;;;AAIA;AACA;AACA,SAASA,GAAT,CAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,IAA1B,EAAgCC,KAAhC,EAAuC;AACnC,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,UAAL,GAAkB,UAAUC,QAAV,EAAoB;AAClC,aAAKL,IAAL,GAAYK,QAAZ;AACH,KAFD;AAGH;;AAED;AACA,IAAIC,QAAQ,IAAIP,GAAJ,CAAQ,QAAR,EAAkB,SAAlB,EAA6B,MAA7B,EAAqC,QAArC,CAAZ;;AAEA;AACA;AACA;AACA;;AAEA,IAAIQ,UAAU,EAACP,MAAM,MAAP,EAAeC,OAAO,QAAtB,EAAgCC,MAAM,MAAtC,EAA8CC,OAAO,OAArD,EAAd;AACA;;AAEA;AACAG,MAAMF,UAAN,CAAiB,SAAjB;;AAEA;AACAL,IAAIS,SAAJ,CAAcC,IAAd,GAAqB,YAAY;AAC7B,QAAIC,aAAa,KAAKV,IAAL,GAAY,GAAZ,GAAkB,KAAKC,KAAvB,GAA+B,GAA/B,GAAqC,KAAKC,IAA1C,GAAiD,GAAjD,GAAuD,KAAKC,KAA7E;AACAQ,aAASC,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoDH,UAApD;AACH,CAHD;;AAKA;;;AAGA;AACA;AACA,SAASI,KAAT,GAAiB;AACbf,QAAIgB,IAAJ,CAAS,IAAT;AACH;AACD;AACAD,MAAMN,SAAN,GAAkBQ,OAAOC,MAAP,CAAclB,IAAIS,SAAlB,CAAlB;AACAM,MAAMN,SAAN,CAAgBU,WAAhB,GAA8BnB,GAA9B,C,CAAmC;;AAEnC;AACA;AACA;AACA;;AAEA;AACA,IAAIoB,UAAU,IAAIL,KAAJ,EAAd;;AAEAA,MAAMN,SAAN,CAAgBY,gBAAhB,GAAmC,YAAW;AAC1C,QAAG,gBAAgBrB,GAAnB,EACIY,SAASC,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoD,iBAApD,CADJ,KAGIF,SAASC,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoD,iBAApD;AACP,CALD","file":"week3.js","sourcesContent":["/**\n * Created by cameronlewis on 6/6/17.\n */\n\n// this creates a prototype for a Car object, using an object constructor function.\n// It will be used in instantiating other new Car objects.\nfunction Car(make, model, year, color) {\n    this.make = make;\n    this.model = model;\n    this.year = year;\n    this.color = color;\n    this.changeMake = function (new_make) {\n        this.make = new_make;\n    };\n}\n\n// this creates a new Car object.\nvar myCar = new Car(\"Toyota\", \"Corolla\", \"2007\", \"silver\");\n\n// I can also create an object this way, without a prototype constructor,\n// but it's much less useful if you're creating many objects of the same type.\n// And sadly, objects created this way can't inherit from other objects,\n// even if they have all the same properties like this one.\n\nvar wifeCar = {make: \"Mini\", model: \"Cooper\", year: \"2014\", color: \"white\"};\n// The name:value pairs are called properties. For example, the pair make:\"Mini\" (see above).\n\n// Now, let's use this new method to change the make of the 'myCar' Car object we've created.\nmyCar.changeMake(\"Awesome\");\n\n// We can also add a new method this way, using the prototype attribute:\nCar.prototype.info = function () {\n    var infoString = this.make + ' ' + this.model + ' ' + this.year + ' ' + this.color;\n    document.getElementById(\"method-call1\").innerHTML = infoString;\n};\n\n//brotherCar = new Car(\"Ford\", \"Ranger\", \"1997\", \"green\");\n\n\n// Here, Coupe is created as a subclass of Car, which means it will\n// inherit (or receive) all the same properties and methods of Car while still remaining a separate object type.\nfunction Coupe() {\n    Car.call(this);\n}\n// With these lines of code, we're going to have Coupe extend the Car superclass\nCoupe.prototype = Object.create(Car.prototype);\nCoupe.prototype.constructor = Car; // this makes the constructor for Coupe the same as Car.\n\n// this means that we will now be able to add new properties and methods specific to Coupe.\n// But we will still keep all the properties and methods of Car!\n// This is very nice, because not only does it decrease code duplication, but it also allows us to separate our objects\n// for clearer organization and purpose.\n\n// Now let's create a new Coupe object:\nvar porsche = new Coupe();\n\nCoupe.prototype.checkInheritance = function() {\n    if(this instanceof Car)\n        document.getElementById(\"car-instance\").innerHTML = \"Yes, it's true.\";\n    else\n        document.getElementById(\"car-instance\").innerHTML = \"Nope, it isn't.\";\n}\n\n"]}