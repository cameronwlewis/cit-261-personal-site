{"version":3,"sources":["../app.js"],"names":["express","require","bodyParser","cookieParser","methodOverride","session","passport","swig","SpotifyStrategy","Strategy","consolidate","path","appKey","appSecret","serializeUser","user","done","deserializeUser","obj","use","clientID","clientSecret","callbackURL","accessToken","refreshToken","profile","process","nextTick","app","set","join","__dirname","secret","initialize","static","engine","get","request","response","render","ensureAuthenticated","authenticate","scope","showDialog","failureRedirect","redirect","logout","data","write","end","next","isAuthenticated","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["var express = require('express'),\n    bodyParser = require('body-parser'),\n    cookieParser = require('cookie-parser'),\n    methodOverride = require('method-override'),\n    session = require('express-session'),\n    passport = require('passport'),\n    swig = require('swig'),\n    SpotifyStrategy = require('passport-spotify/lib/passport-spotify/index').Strategy;\n\nconst consolidate = require('consolidate');\nconst path = require(\"path\");\n\nconst appKey = 'f3255a4c463440ac9d20cceef38bcd7a';\nconst appSecret = '72013ba328fc44c089303fb2cbab0e90';\n\n// Passport session setup.\n//   To support persistent login sessions, Passport needs to be able to\n//   serialize users into and deserialize users out of the session. Typically,\n//   this will be as simple as storing the user ID when serializing, and finding\n//   the user by ID when deserializing. However, since this example does not\n//   have a database of user records, the complete spotify profile is serialized\n//   and deserialized.\npassport.serializeUser(function(user, done) {\n    done(null, user);\n});\n\npassport.deserializeUser(function(obj, done) {\n    done(null, obj);\n});\n\n\n// Use the SpotifyStrategy within Passport.\n//   Strategies in Passport require a `verify` function, which accept\n//   credentials (in this case, an accessToken, refreshToken, and spotify\n//   profile), and invoke a callback with a user object.\npassport.use(new SpotifyStrategy({\n        clientID: appKey,\n        clientSecret: appSecret,\n        callbackURL: 'http://localhost:3000/callback'\n    },\n    function(accessToken, refreshToken, profile, done) {\n        // asynchronous verification, for effect...\n        process.nextTick(function () {\n            // To keep the example simple, the user's spotify profile is returned to\n            // represent the logged-in user. In a typical application, you would want\n            // to associate the spotify account with a user record in your database,\n            // and return that user instead.\n            return done(null, profile);\n        });\n    }));\n\nconst app = express();\n\n// view engine setup. todo: THIS IS HOW IT KNOWS TO LOOK IN THE 'VIEWS' FOLDER\napp.set('views', path.join(__dirname + '/../views'));\n//app.set('views', '../views');\n\napp.set('view engine', 'ejs'); // todo: handlebars template engine set here\n\napp.use(cookieParser());\napp.use(bodyParser());\napp.use(methodOverride());\napp.use(session({ secret: 'keyboard cat' }));\n// Initialize Passport!  Also use passport.session() middleware, to support\n// persistent login sessions (recommended).\napp.use(passport.initialize());\napp.use(passport.session());\n\n/*\ntodo: this serves up all my static files available in public.\n When referencing a file in public, assume 'public' is the root folder,\n and type in references as follows in an HTML file:\n <script src=\"javascripts/test.js\"></script>\n */\napp.use(express.static(__dirname + '/../public'));\n\napp.engine('html', consolidate.swig);\n\napp.get('/', function(request, response){\n    response.render('test.html', { user: request.user });\n});\n\napp.get('/account', ensureAuthenticated, function(request, response){\n    response.render('account.html', { user: request.user });\n});\n\n\napp.get('/login', function(request, response){\n    response.render('login.html', { user: request.user });\n});\n\n// GET /auth/spotify\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request. The first step in spotify authentication will involve redirecting\n//   the user to spotify.com. After authorization, spotify will redirect the user\n//   back to this application at /auth/spotify/callback\napp.get('/auth/spotify', //todo: THIS IS WAITING FOR A GET REQUEST FROM THE CLIENT! THE CODE BELOW EXECUTES WHEN THIS IS REQUESTED\n    passport.authenticate('spotify', {scope: ['user-read-email', 'user-read-private'], showDialog: true}),\n    function(request, response){\n// The request will be redirected to spotify for authentication, so this\n// function will not be called.\n    });\n\n// GET /auth/spotify/callback\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request. If authentication fails, the user will be redirected back to the\n//   login page. Otherwise, the primary route function function will be called,\n//   which, in this example, will redirect the user to the home page.\napp.get('/callback',\n    passport.authenticate('spotify', { failureRedirect: '/login' }),\n    function(request, response) {\n        response.redirect('/');\n    });\n\napp.get('/logout', function(request, response){\n    request.logout();\n    response.redirect('/');\n});\n\napp.get('/data_test', function(request, response){\n    let data = 'random string of numbers: 1 2 3 4 5 6 7';\n    response.write(data);\n    response.end();\n\n});\n\n//app.listen(3000);\n\n// Simple route middleware to ensure user is authenticated.\n//   Use this route middleware on any resource that needs to be protected.  If\n//   the request is authenticated (typically via a persistent login session),\n//   the request will proceed. Otherwise, the user will be redirected to the\n//   login page.\nfunction ensureAuthenticated(request, response, next) {\n    if (request.isAuthenticated()) { return next(); }\n    response.redirect('/login');\n}\n\n// TODO: THIS IS WHAT ALLOWS IT TO BE IMPORTED BY /bin/www\nmodule.exports = app;"]}